---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: ml-boilerplate
  name: env
  labels:
    app.kubernetes.io/name: env
data:
  API_PORT: "4000"
  MLFLOW_PORT: "5000"
  POSTGRES_PORT: "5432"
  UI_PORT: "3000"
  REACT_APP_API_URL: "http://k8s-mlboiler-apiingre-c23bd9b40c-1464310491.eu-west-1.elb.amazonaws.com/api/v1.0"
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ml-boilerplate
  name: api
  labels:
    app.kubernetes.io/name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api
    spec:
      containers:
        - name: api
          command: ["/bin/sh"]
          args: ["-c", "flask db init || true && flask db revision --rev-id 0e752339aadf && flask db migrate && flask db upgrade && flask run --host=0.0.0.0 --port=4000" ]
          env:
            - name: API_PORT
              valueFrom:
                configMapKeyRef:
                  key: API_PORT
                  name: env
            - name: DB_ENDPOINT
              value: 'postgresql://postgres:postgres@db:5432'
            - name: FLASK_APP
              value: app.py
            - name: FLASK_ENV
              value: development
            - name: GRANT_CORS_ACCESS
              value: http://client:3000
            - name: MLFLOW_ENDPOINT
              value: http://models:5000/invocations
            - name: MLFLOW_PORT
              valueFrom:
                configMapKeyRef:
                  key: MLFLOW_PORT
                  name: env
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: env
            - name: UI_PORT
              valueFrom:
                configMapKeyRef:
                  key: UI_PORT
                  name: env
          image: 256108236771.dkr.ecr.eu-west-1.amazonaws.com/ml-boilerplate/api 
          ports:
            - containerPort: 4000
          resources: 
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
       #   volumeMounts:
       #     - mountPath: /backend
       #       name: api-claim0
      restartPolicy: Always
      #volumes:
      #  - name: api-claim0
      #    persistentVolumeClaim:
      #      claimName: api-claim0
status: {}

--- 
apiVersion: v1
kind: Service
metadata:
  namespace: ml-boilerplate
  name: api
  labels:
    app.kubernetes.io/name: api
spec:
  type: NodePort
  ports:
    - name: "4000"
      port: 4000
      targetPort: 4000
  selector:
    app.kubernetes.io/name: api
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ml-boilerplate
  name: client
  labels:
    app.kubernetes.io/name: client
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: client
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: client
    spec:
      containers:
        - args:
            - npm
            - start
            - --port 3000
          env:
            - name: API_PORT
              valueFrom:
                configMapKeyRef:
                  key: API_PORT
                  name: env
            - name: MLFLOW_PORT
              valueFrom:
                configMapKeyRef:
                  key: MLFLOW_PORT
                  name: env
            - name: NODE_ENV
              value: development
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: env
            - name: REACT_APP_API_URL
              #value: http://api:4000/api/v1.0
              valueFrom:
                configMapKeyRef:
                  key: REACT_APP_API_URL
                  name: env
            - name: UI_PORT
              valueFrom:
                configMapKeyRef:
                  key: UI_PORT
                  name: env
          image: 256108236771.dkr.ecr.eu-west-1.amazonaws.com/ml-boilerplate/client
          name: client
          ports:
            - containerPort: 3000
          resources: {}
            # requests:
            #   memory: "64Mi"
            #   cpu: "250m"
            # limits:
            #   memory: "128Mi"
            #   cpu: "500m"
          #volumeMounts:
          #  - mountPath: /frontend
          #    name: frontend
          #  - mountPath: /frontend/node_modules
          #    name: node-modules
      restartPolicy: Always
      #volumes:
      #  - name: frontend
      #    hostPath: 
      #      path: /Users/vishalfaldu/ml-boilerplate/client
      #  - name: node-modules
      #    hostPath:
      #      path: /Users/vishalfaldu/ml-boilerplate/client/node_modules
      # volumes:
      #   - name: client-claim0
      #     persistentVolumeClaim:
      #       claimName: client-claim0
      #   - name: node-modules
     #     persistentVolumeClaim:
      #       claimName: node-modules
status: {}

---
apiVersion: v1
kind: Service
metadata:
  namespace: ml-boilerplate
  name: client
  labels:
    app.kubernetes.io/name: client
spec:
  type: NodePort
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    app.kubernetes.io/name: client
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ml-boilerplate
  name: models
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: models
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: models
    spec:
      containers:
        - env:
            - name: API_PORT
              valueFrom:
                configMapKeyRef:
                  key: API_PORT
                  name: env
            - name: MLFLOW_PORT
              valueFrom:
                configMapKeyRef:
                  key: MLFLOW_PORT
                  name: env
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: env
            - name: UI_PORT
              valueFrom:
                configMapKeyRef:
                  key: UI_PORT
                  name: env
          image: 256108236771.dkr.ecr.eu-west-1.amazonaws.com/ml-boilerplate/models
          name: models
          ports:
            - containerPort: 5000
          resources: 
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
      restartPolicy: Always
status: {}

---
apiVersion: v1
kind: Service
metadata:
  namespace: ml-boilerplate
  name: models
spec:
  ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
  selector:
    app.kubernetes.io/name: models
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  namespace: ml-boilerplate
  name: db
  labels:
    service.kubernetes.io/name: db
spec:
  externalName: database-1.crtt4rvmuigi.eu-west-1.rds.amazonaws.com
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  sessionAffinity: None
  selector:
    service.kubernetes.io/name: db
  type: ExternalName
status:
  loadBalancer: {}